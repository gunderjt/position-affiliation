<?php

/**
 * @file
 * Defines a simple position_affiliation field type.
 */

/**
 * Implements hook_field_info().
 */
function position_affiliation_field_info() {
  return array(
    'position_affiliation' => array(
      'label' => t('Position and Affiliation'),
      'description' => t('The Position of Affiliation of Personnel'),
      'default_widget' => 'position_affiliation_form',
      'default_formatter' => 'position_affiliation_default',
    ),
  );
}

function position_affiliation_field_schema($field){
  //return the $field array (already initialized) with columns, indexes, and foreign keys working
  //This builds the table in the database (only when an object is created, I think?)
  //https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_schema/7
  if($field['type'] == 'position_affiliation'){
    $schema["columns"] = array(
      'position' => array(
        'description' => 'tid of ibs_position',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'affiliation' => array(
        'description' => 'tid for ibs_affilitaion',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'start_date' => array(
        'description' => 'The start date for a position',
        'type' => 'varchar',
        'mysql_type' => 'datetime',
        'not null' => FALSE,  //CHANGE WHEN I GET IT FIGURED OUT
      ),
      'end_date' => array(
        'description' => 'The end date for a position',
        'type' => 'varchar',
        'mysql_type' => 'datetime',
        'not null' => FALSE,
      ),
    );
    return $schema;
  }
 }

/**
 * Implements hook_field_is_empty().
 */
function position_affiliation_field_is_empty($item, $field) {
  if($field['type'] == 'position_affiliation'){
    return ($item['position'] == 0 && $item['affiliation'] == 0);
  }
  return FALSE; 
}

/**
  * Implements hook_field_validate
  * Not sure if I need to implement this.
  */
// function position_affiliation_field_validate($obj_type, $object, $field, $instance, $langcode, $items, &$errors){
  
// }

function position_affiliation_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items){
  if( $field['type'] == 'position_affiliation'){ 
    foreach($items as $delta => $item) {
      $items[$delta]['start_date'] = date("Y-m-d", mktime(0,0,0, 
        $items[$delta]['start_date']['month'], 
        $items[$delta]['start_date']['day'], 
        $items[$delta]['start_date']['year']));
      if($items[$delta]['end_date_show']){
        $items[$delta]['end_date'] = date("Y-m-d", mktime(0,0,0, 
          $items[$delta]['end_date']['month'],
          $items[$delta]['end_date']['day'], 
          $items[$delta]['end_date']['year']));
      } else {
        $items[$delta]['end_date'] = NULL;
      }
    }
  }
}

/**
 * Implements hook_field_widget_info().
 */
function position_affiliation_field_widget_info() {
  return array(
    'position_affiliation_form' => array(
      'label' => t('Position and Affiliation Form'),
      'field types' => array('position_affiliation'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}


/**
 * Implements hook_field_widget_form().
 */
function position_affiliation_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $base = $element;

  //Add javascript that allows show date to toggle the view
  drupal_add_js(drupal_get_path('module', 'position_affiliation') .'/position_affiliation.js');

  if($instance['widget']['type']  == 'position_affiliation_form') {
    $format = 'Y-m-d';
    $element['position'] = array(
      '#type' => 'select',
      '#title' => t('Position'),
      '#default_value' => isset($items[$delta]['position']) ? $items[$delta]['position'] : NULL,
      '#options' => taxonomy_search(IBS_POSITION_VID, "IBS Position"), //IBS_POSITION_VID taxonomy_search() is defined in ibs_custom_field_api module
    );

    $element['affiliation'] = array(
      '#type' => 'select',
      '#title' => t('Affiliation'),
      '#default_value' => isset($items[$delta]['affiliation']) ? $items[$delta]['affiliation'] : NULL,
      '#options' => taxonomy_search(IBS_AFFILIATION_VID, "IBS Affiliation"), //IBS_AFFILIATION_VID taxonomy_search() is defined in ibs_custom_field_api module
    );
    //This is the format of start date
    // $items[delta]['start_date'] = array[3]
    //   $items[delta]['start_date']['month'] = (string) 9
    //   $items[delfta]['start_date']['day'] = (string) 11
    //   $items[delta]['start_date']['year'] = (string) 2014
    $element['start_date'] = array(
      '#type' => 'date',
      '#title' => t('Start date'),
      '#default_value' => isset($items[$delta]['start_date'])? default_date($items[$delta]['start_date']): NULL,
    );
    $element['end_date_show'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enter End Date?'),
      '#attributes' => array(
          'class' => array('end_date_show'),
        ),
    );
    //If end_date is defined add a check to the end_date_show attribute
    if(isset($items[$delta]['end_date']) ? ($items[$delta]['end_date'] ? TRUE : FALSE) : FALSE){
      $element['end_date_show']['#attributes']['checked'] = 'checked';
    }

    $element['end_date'] = array(
      '#type' => 'date',
      '#title' => t('End date'),
      '#attributes' => array(
          'class' => array('end_date'),
        ),
      '#default_value' => isset($items[$delta]['end_date'])? default_date($items[$delta]['end_date']): NULL,
    );
  }
  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function position_affiliation_field_formatter_info() {
  return array(
    'position_affiliation_default' => array(
      'label' => t('Default'),
      'field types' => array('position_affiliation'),
    ),
    'position_affiliation_profile' => array(
      'label' => t('Profile'),
      'field types' => array('position_affiliation'),
    ),
    'position_affiliation_bod' => array(
      'label' => t('Board of Directors'),
      'field types' => array('position_affiliation'),
    ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function position_affiliation_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array(); 
  $settings = $display['settings'];
  switch($display['type']){
    case 'position_affiliation_default':
      foreach ($items as $delta => $item) {
        $element[$delta]["#markup"] = '';
        foreach($item as $key => $value){
          $output ="<div>". $key ."</div>" . "<div>". $value ."</div>";
          $element[$delta]["#markup"] .= $output;
        }
      }
      break;
    case 'position_affiliation_profile':
      foreach ($items as $delta => $item) {
        if($item['end_date'] == NULL){
          $position_obj = taxonomy_term_load($item['position']);
          $affiliation_obj = taxonomy_term_load($item['affiliation']);
          $output = t('@position, ', array(
            '@position' => $position_obj->name,   
          ));
          if (!empty($affiliation_obj->field_url)){
            foreach($affiliation_obj->field_url['und'] as $url_delta => $url){
              $output .= l($affiliation_obj->name, $url['safe_value']);
            }
          } else{
            $output .= $affiliation_obj->name;
          }
          $element[$delta] = array('#markup' => $output);
        }
      }
      break;
    case 'position_affiliation_bod':
      foreach ($items as $delta => $item) {
        if(($item['end_date'] == NULL) && ($item['position'] == IBS_DIRECTOR_TID)){
          $position_obj = taxonomy_term_load($item['position']);
          $affiliation_obj = taxonomy_term_load($item['affiliation']);
          $output = t('@position, ', array(
            '@position' => $position_obj->name,   
          ));
          if (!empty($affiliation_obj->field_url)){
            foreach($affiliation_obj->field_url['und'] as $url_delta => $url){
              $output .= l($affiliation_obj->name, $url['safe_value']);
            }
          } else{
            $output .= $affiliation_obj->name;
          }
          $element[$delta] = array('#markup' => $output);
        }
      }
      break;
  }
  return $element;
}


function default_date($date_str){
  $time = strtotime($date_str);
  return array('year' => intval(date("Y", $time)),
    'month' => intval(date("m", $time)),
    'day' => intval(date("d", $time)),
    );
}